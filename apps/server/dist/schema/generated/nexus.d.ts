/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */
import type { Context } from "./../../context";
import type { FieldAuthorizeResolver } from "nexus/dist/plugins/fieldAuthorizePlugin";
import type { core } from "nexus";
declare global {
    interface NexusGenCustomInputMethods<TypeName extends string> {
        /**
         * A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
         */
        date<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void;
    }
}
declare global {
    interface NexusGenCustomOutputMethods<TypeName extends string> {
        /**
         * A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
         */
        date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void;
    }
}
declare global {
    interface NexusGen extends NexusGenTypes {
    }
}
export interface NexusGenInputs {
}
export interface NexusGenEnums {
    Role: "ADMIN" | "USER";
}
export interface NexusGenScalars {
    String: string;
    Int: number;
    Float: number;
    Boolean: boolean;
    ID: string;
    Date: any;
    JSON: any;
}
export interface NexusGenObjects {
    AuthResponse: {
        jwt: string;
    };
    CategoriesRelayed: {
        edges?: Array<NexusGenRootTypes['Category'] | null> | null;
        pageInfo?: NexusGenRootTypes['PageInfo'] | null;
    };
    Category: {
        createdAt: NexusGenScalars['Date'];
        id: string;
        name?: string | null;
        products?: Array<NexusGenRootTypes['Product'] | null> | null;
        updatedAt: NexusGenScalars['Date'];
    };
    CmsInfo: {
        schema?: NexusGenScalars['JSON'] | null;
    };
    Mutation: {};
    Order: {
        createdAt: NexusGenScalars['Date'];
        id: string;
        products?: Array<NexusGenRootTypes['Product'] | null> | null;
        state?: string | null;
        updatedAt: NexusGenScalars['Date'];
        user?: NexusGenRootTypes['User'] | null;
    };
    OrdersRelayed: {
        edges?: Array<NexusGenRootTypes['Order'] | null> | null;
        pageInfo?: NexusGenRootTypes['PageInfo'] | null;
    };
    PageInfo: {
        currentPage: number;
        endCursor: number;
        endPage: number;
        hasNextPage: boolean;
        hasPreviousPage: boolean;
        startCursor: number;
    };
    Product: {
        SKU?: string | null;
        category?: NexusGenRootTypes['Category'] | null;
        createdAt: NexusGenScalars['Date'];
        description?: string | null;
        id: string;
        name?: string | null;
        orders?: Array<NexusGenRootTypes['Order'] | null> | null;
        price?: number | null;
        updatedAt: NexusGenScalars['Date'];
    };
    ProductsRelayed: {
        edges?: Array<NexusGenRootTypes['Product'] | null> | null;
        pageInfo?: NexusGenRootTypes['PageInfo'] | null;
    };
    Query: {};
    User: {
        createdAt: NexusGenScalars['Date'];
        email: string;
        id: string;
        name?: string | null;
        orders?: NexusGenRootTypes['Order'] | null;
        role?: NexusGenEnums['Role'] | null;
        updatedAt: NexusGenScalars['Date'];
    };
    UsersRelayed: {
        edges?: Array<NexusGenRootTypes['User'] | null> | null;
        pageInfo?: NexusGenRootTypes['PageInfo'] | null;
    };
}
export interface NexusGenInterfaces {
}
export interface NexusGenUnions {
}
export declare type NexusGenRootTypes = NexusGenObjects;
export declare type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums;
export interface NexusGenFieldTypes {
    AuthResponse: {
        jwt: string;
    };
    CategoriesRelayed: {
        edges: Array<NexusGenRootTypes['Category'] | null> | null;
        pageInfo: NexusGenRootTypes['PageInfo'] | null;
    };
    Category: {
        createdAt: NexusGenScalars['Date'];
        id: string;
        name: string | null;
        products: Array<NexusGenRootTypes['Product'] | null> | null;
        updatedAt: NexusGenScalars['Date'];
    };
    CmsInfo: {
        schema: NexusGenScalars['JSON'] | null;
    };
    Mutation: {
        createCategory: NexusGenRootTypes['Category'] | null;
        createOrder: NexusGenRootTypes['Order'] | null;
        createProduct: NexusGenRootTypes['Product'] | null;
        createUser: NexusGenRootTypes['User'] | null;
        deleteCategory: NexusGenRootTypes['Category'] | null;
        deleteOrder: NexusGenRootTypes['Order'] | null;
        deleteProduct: NexusGenRootTypes['Product'] | null;
        deleteUser: NexusGenRootTypes['User'] | null;
        logInUser: NexusGenRootTypes['AuthResponse'] | null;
        logOutUser: NexusGenScalars['JSON'] | null;
        registerUser: NexusGenRootTypes['AuthResponse'] | null;
        updateCategory: NexusGenRootTypes['Category'] | null;
        updateOrder: NexusGenRootTypes['Order'] | null;
        updateProduct: NexusGenRootTypes['Product'] | null;
        updateUser: NexusGenRootTypes['User'] | null;
    };
    Order: {
        createdAt: NexusGenScalars['Date'];
        id: string;
        products: Array<NexusGenRootTypes['Product'] | null> | null;
        state: string | null;
        updatedAt: NexusGenScalars['Date'];
        user: NexusGenRootTypes['User'] | null;
    };
    OrdersRelayed: {
        edges: Array<NexusGenRootTypes['Order'] | null> | null;
        pageInfo: NexusGenRootTypes['PageInfo'] | null;
    };
    PageInfo: {
        currentPage: number;
        endCursor: number;
        endPage: number;
        hasNextPage: boolean;
        hasPreviousPage: boolean;
        startCursor: number;
    };
    Product: {
        SKU: string | null;
        category: NexusGenRootTypes['Category'] | null;
        createdAt: NexusGenScalars['Date'];
        description: string | null;
        id: string;
        name: string | null;
        orders: Array<NexusGenRootTypes['Order'] | null> | null;
        price: number | null;
        updatedAt: NexusGenScalars['Date'];
    };
    ProductsRelayed: {
        edges: Array<NexusGenRootTypes['Product'] | null> | null;
        pageInfo: NexusGenRootTypes['PageInfo'] | null;
    };
    Query: {
        categories: NexusGenRootTypes['CategoriesRelayed'] | null;
        categoryById: NexusGenRootTypes['Category'] | null;
        me: NexusGenRootTypes['User'] | null;
        orderById: NexusGenRootTypes['Order'] | null;
        orders: NexusGenRootTypes['OrdersRelayed'] | null;
        productById: NexusGenRootTypes['Product'] | null;
        products: NexusGenRootTypes['ProductsRelayed'] | null;
        qcms: NexusGenRootTypes['CmsInfo'] | null;
        userById: NexusGenRootTypes['User'] | null;
        users: NexusGenRootTypes['UsersRelayed'] | null;
    };
    User: {
        createdAt: NexusGenScalars['Date'];
        email: string;
        id: string;
        name: string | null;
        orders: NexusGenRootTypes['Order'] | null;
        role: NexusGenEnums['Role'] | null;
        updatedAt: NexusGenScalars['Date'];
    };
    UsersRelayed: {
        edges: Array<NexusGenRootTypes['User'] | null> | null;
        pageInfo: NexusGenRootTypes['PageInfo'] | null;
    };
}
export interface NexusGenFieldTypeNames {
    AuthResponse: {
        jwt: 'String';
    };
    CategoriesRelayed: {
        edges: 'Category';
        pageInfo: 'PageInfo';
    };
    Category: {
        createdAt: 'Date';
        id: 'String';
        name: 'String';
        products: 'Product';
        updatedAt: 'Date';
    };
    CmsInfo: {
        schema: 'JSON';
    };
    Mutation: {
        createCategory: 'Category';
        createOrder: 'Order';
        createProduct: 'Product';
        createUser: 'User';
        deleteCategory: 'Category';
        deleteOrder: 'Order';
        deleteProduct: 'Product';
        deleteUser: 'User';
        logInUser: 'AuthResponse';
        logOutUser: 'JSON';
        registerUser: 'AuthResponse';
        updateCategory: 'Category';
        updateOrder: 'Order';
        updateProduct: 'Product';
        updateUser: 'User';
    };
    Order: {
        createdAt: 'Date';
        id: 'String';
        products: 'Product';
        state: 'String';
        updatedAt: 'Date';
        user: 'User';
    };
    OrdersRelayed: {
        edges: 'Order';
        pageInfo: 'PageInfo';
    };
    PageInfo: {
        currentPage: 'Int';
        endCursor: 'Int';
        endPage: 'Int';
        hasNextPage: 'Boolean';
        hasPreviousPage: 'Boolean';
        startCursor: 'Int';
    };
    Product: {
        SKU: 'String';
        category: 'Category';
        createdAt: 'Date';
        description: 'String';
        id: 'String';
        name: 'String';
        orders: 'Order';
        price: 'Int';
        updatedAt: 'Date';
    };
    ProductsRelayed: {
        edges: 'Product';
        pageInfo: 'PageInfo';
    };
    Query: {
        categories: 'CategoriesRelayed';
        categoryById: 'Category';
        me: 'User';
        orderById: 'Order';
        orders: 'OrdersRelayed';
        productById: 'Product';
        products: 'ProductsRelayed';
        qcms: 'CmsInfo';
        userById: 'User';
        users: 'UsersRelayed';
    };
    User: {
        createdAt: 'Date';
        email: 'String';
        id: 'String';
        name: 'String';
        orders: 'Order';
        role: 'Role';
        updatedAt: 'Date';
    };
    UsersRelayed: {
        edges: 'User';
        pageInfo: 'PageInfo';
    };
}
export interface NexusGenArgTypes {
    Mutation: {
        createCategory: {
            data?: NexusGenScalars['JSON'] | null;
        };
        createOrder: {
            data?: NexusGenScalars['JSON'] | null;
        };
        createProduct: {
            data?: NexusGenScalars['JSON'] | null;
        };
        createUser: {
            data?: NexusGenScalars['JSON'] | null;
        };
        deleteCategory: {
            id: string;
        };
        deleteOrder: {
            id: string;
        };
        deleteProduct: {
            id: string;
        };
        deleteUser: {
            id: string;
        };
        logInUser: {
            email: string;
            password: string;
        };
        registerUser: {
            email: string;
            name?: string | null;
            password: string;
        };
        updateCategory: {
            data?: NexusGenScalars['JSON'] | null;
            id: string;
        };
        updateOrder: {
            data?: NexusGenScalars['JSON'] | null;
            id: string;
        };
        updateProduct: {
            data?: NexusGenScalars['JSON'] | null;
            id: string;
        };
        updateUser: {
            data?: NexusGenScalars['JSON'] | null;
            id: string;
        };
    };
    Query: {
        categories: {
            orderBy?: NexusGenScalars['JSON'] | null;
            skip?: number | null;
            take: number | null;
            where?: NexusGenScalars['JSON'] | null;
        };
        categoryById: {
            id: string;
        };
        orderById: {
            id: string;
        };
        orders: {
            orderBy?: NexusGenScalars['JSON'] | null;
            skip?: number | null;
            take: number | null;
            where?: NexusGenScalars['JSON'] | null;
        };
        productById: {
            id: string;
        };
        products: {
            orderBy?: NexusGenScalars['JSON'] | null;
            skip?: number | null;
            take: number | null;
            where?: NexusGenScalars['JSON'] | null;
        };
        userById: {
            id: string;
        };
        users: {
            orderBy?: NexusGenScalars['JSON'] | null;
            skip?: number | null;
            take: number | null;
            where?: NexusGenScalars['JSON'] | null;
        };
    };
}
export interface NexusGenAbstractTypeMembers {
}
export interface NexusGenTypeInterfaces {
}
export declare type NexusGenObjectNames = keyof NexusGenObjects;
export declare type NexusGenInputNames = never;
export declare type NexusGenEnumNames = keyof NexusGenEnums;
export declare type NexusGenInterfaceNames = never;
export declare type NexusGenScalarNames = keyof NexusGenScalars;
export declare type NexusGenUnionNames = never;
export declare type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;
export declare type NexusGenAbstractsUsingStrategyResolveType = never;
export declare type NexusGenFeaturesConfig = {
    abstractTypeStrategies: {
        isTypeOf: false;
        resolveType: true;
        __typename: false;
    };
};
export interface NexusGenTypes {
    context: Context;
    inputTypes: NexusGenInputs;
    rootTypes: NexusGenRootTypes;
    inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
    argTypes: NexusGenArgTypes;
    fieldTypes: NexusGenFieldTypes;
    fieldTypeNames: NexusGenFieldTypeNames;
    allTypes: NexusGenAllTypes;
    typeInterfaces: NexusGenTypeInterfaces;
    objectNames: NexusGenObjectNames;
    inputNames: NexusGenInputNames;
    enumNames: NexusGenEnumNames;
    interfaceNames: NexusGenInterfaceNames;
    scalarNames: NexusGenScalarNames;
    unionNames: NexusGenUnionNames;
    allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
    allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
    allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes'];
    abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
    abstractTypeMembers: NexusGenAbstractTypeMembers;
    objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
    abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
    features: NexusGenFeaturesConfig;
}
declare global {
    interface NexusGenPluginTypeConfig<TypeName extends string> {
    }
    interface NexusGenPluginInputTypeConfig<TypeName extends string> {
    }
    interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
        /**
         * Authorization for an individual field. Returning "true"
         * or "Promise<true>" means the field can be accessed.
         * Returning "false" or "Promise<false>" will respond
         * with a "Not Authorized" error for the field.
         * Returning or throwing an error will also prevent the
         * resolver from executing.
         */
        authorize?: FieldAuthorizeResolver<TypeName, FieldName>;
    }
    interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
    }
    interface NexusGenPluginSchemaConfig {
    }
    interface NexusGenPluginArgConfig {
    }
}
