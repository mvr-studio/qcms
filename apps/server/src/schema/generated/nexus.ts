/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./../../context"
import type { FieldAuthorizeResolver } from "nexus/dist/plugins/fieldAuthorizePlugin"
import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Date";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Date";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
  Role: "ADMIN" | "USER"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  Date: any
  JSON: any
}

export interface NexusGenObjects {
  AuthResponse: { // root type
    jwt: string; // String!
  }
  Category: { // root type
    createdAt: NexusGenScalars['Date']; // Date!
    id: string; // String!
    name?: string | null; // String
    posts?: Array<NexusGenRootTypes['Post'] | null> | null; // [Post]
    updatedAt: NexusGenScalars['Date']; // Date!
  }
  CmsInfo: { // root type
    schema?: NexusGenScalars['JSON'] | null; // JSON
  }
  Mutation: {};
  Post: { // root type
    categories?: Array<NexusGenRootTypes['Category'] | null> | null; // [Category]
    content?: string | null; // String
    createdAt: NexusGenScalars['Date']; // Date!
    id: string; // String!
    name?: string | null; // String
    updatedAt: NexusGenScalars['Date']; // Date!
  }
  Query: {};
  User: { // root type
    createdAt: NexusGenScalars['Date']; // Date!
    email: string; // String!
    id: string; // String!
    name?: string | null; // String
    role?: NexusGenEnums['Role'] | null; // Role
    updatedAt: NexusGenScalars['Date']; // Date!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  AuthResponse: { // field return type
    jwt: string; // String!
  }
  Category: { // field return type
    createdAt: NexusGenScalars['Date']; // Date!
    id: string; // String!
    name: string | null; // String
    posts: Array<NexusGenRootTypes['Post'] | null> | null; // [Post]
    updatedAt: NexusGenScalars['Date']; // Date!
  }
  CmsInfo: { // field return type
    schema: NexusGenScalars['JSON'] | null; // JSON
  }
  Mutation: { // field return type
    createCategory: NexusGenRootTypes['Category'] | null; // Category
    createPost: NexusGenRootTypes['Post'] | null; // Post
    createUser: NexusGenRootTypes['User'] | null; // User
    deleteCategory: NexusGenRootTypes['Category'] | null; // Category
    deletePost: NexusGenRootTypes['Post'] | null; // Post
    deleteUser: NexusGenRootTypes['User'] | null; // User
    logInUser: NexusGenRootTypes['AuthResponse'] | null; // AuthResponse
    logOutUser: NexusGenScalars['JSON'] | null; // JSON
    registerUser: NexusGenRootTypes['AuthResponse'] | null; // AuthResponse
    updateCategory: NexusGenRootTypes['Category'] | null; // Category
    updatePost: NexusGenRootTypes['Post'] | null; // Post
    updateUser: NexusGenRootTypes['User'] | null; // User
  }
  Post: { // field return type
    categories: Array<NexusGenRootTypes['Category'] | null> | null; // [Category]
    content: string | null; // String
    createdAt: NexusGenScalars['Date']; // Date!
    id: string; // String!
    name: string | null; // String
    updatedAt: NexusGenScalars['Date']; // Date!
  }
  Query: { // field return type
    categories: Array<NexusGenRootTypes['Category'] | null> | null; // [Category]
    categoryById: NexusGenRootTypes['Category'] | null; // Category
    me: NexusGenRootTypes['User'] | null; // User
    postById: NexusGenRootTypes['Post'] | null; // Post
    posts: Array<NexusGenRootTypes['Post'] | null> | null; // [Post]
    qcms: NexusGenRootTypes['CmsInfo'] | null; // CmsInfo
    userById: NexusGenRootTypes['User'] | null; // User
    users: Array<NexusGenRootTypes['User'] | null> | null; // [User]
  }
  User: { // field return type
    createdAt: NexusGenScalars['Date']; // Date!
    email: string; // String!
    id: string; // String!
    name: string | null; // String
    role: NexusGenEnums['Role'] | null; // Role
    updatedAt: NexusGenScalars['Date']; // Date!
  }
}

export interface NexusGenFieldTypeNames {
  AuthResponse: { // field return type name
    jwt: 'String'
  }
  Category: { // field return type name
    createdAt: 'Date'
    id: 'String'
    name: 'String'
    posts: 'Post'
    updatedAt: 'Date'
  }
  CmsInfo: { // field return type name
    schema: 'JSON'
  }
  Mutation: { // field return type name
    createCategory: 'Category'
    createPost: 'Post'
    createUser: 'User'
    deleteCategory: 'Category'
    deletePost: 'Post'
    deleteUser: 'User'
    logInUser: 'AuthResponse'
    logOutUser: 'JSON'
    registerUser: 'AuthResponse'
    updateCategory: 'Category'
    updatePost: 'Post'
    updateUser: 'User'
  }
  Post: { // field return type name
    categories: 'Category'
    content: 'String'
    createdAt: 'Date'
    id: 'String'
    name: 'String'
    updatedAt: 'Date'
  }
  Query: { // field return type name
    categories: 'Category'
    categoryById: 'Category'
    me: 'User'
    postById: 'Post'
    posts: 'Post'
    qcms: 'CmsInfo'
    userById: 'User'
    users: 'User'
  }
  User: { // field return type name
    createdAt: 'Date'
    email: 'String'
    id: 'String'
    name: 'String'
    role: 'Role'
    updatedAt: 'Date'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createCategory: { // args
      data?: NexusGenScalars['JSON'] | null; // JSON
    }
    createPost: { // args
      data?: NexusGenScalars['JSON'] | null; // JSON
    }
    createUser: { // args
      data?: NexusGenScalars['JSON'] | null; // JSON
    }
    deleteCategory: { // args
      id: string; // String!
    }
    deletePost: { // args
      id: string; // String!
    }
    deleteUser: { // args
      id: string; // String!
    }
    logInUser: { // args
      email: string; // String!
      password: string; // String!
    }
    registerUser: { // args
      email: string; // String!
      name?: string | null; // String
      password: string; // String!
    }
    updateCategory: { // args
      data?: NexusGenScalars['JSON'] | null; // JSON
      id: string; // String!
    }
    updatePost: { // args
      data?: NexusGenScalars['JSON'] | null; // JSON
      id: string; // String!
    }
    updateUser: { // args
      data?: NexusGenScalars['JSON'] | null; // JSON
      id: string; // String!
    }
  }
  Query: {
    categories: { // args
      orderBy?: NexusGenScalars['JSON'] | null; // JSON
      skip?: number | null; // Int
      take?: number | null; // Int
      where?: NexusGenScalars['JSON'] | null; // JSON
    }
    categoryById: { // args
      id: string; // String!
    }
    postById: { // args
      id: string; // String!
    }
    posts: { // args
      orderBy?: NexusGenScalars['JSON'] | null; // JSON
      skip?: number | null; // Int
      take?: number | null; // Int
      where?: NexusGenScalars['JSON'] | null; // JSON
    }
    userById: { // args
      id: string; // String!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Authorization for an individual field. Returning "true"
     * or "Promise<true>" means the field can be accessed.
     * Returning "false" or "Promise<false>" will respond
     * with a "Not Authorized" error for the field.
     * Returning or throwing an error will also prevent the
     * resolver from executing.
     */
    authorize?: FieldAuthorizeResolver<TypeName, FieldName>
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}